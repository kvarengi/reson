import numpy as np
from sklearn.metrics import mean_squared_error

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.weights_input_to_hidden = np.random.randn(input_size, hidden_size)
        self.weights_hidden_to_output = np.random.randn(hidden_size, output_size)

    def forward(self, input_data):
        hidden_layer_output = self.weights_input_to_hidden.dot(input_data)
        output_layer_output = self.weights_hidden_to_output.dot(hidden_layer_output)
        return output_layer_output

    def train(self, input_data, target, epochs=1000, learning_rate=0.1):
        for epoch in range(epochs):
            # Вычисление ошибки
            error = 0
            for input_data, target in zip(input_data, target):
                output = self.forward(input_data)
                error += mean_squared_error(target, output)
            error /= len(input_data)

            # Обновление весов
            self.weights_input_to_hidden -= learning_rate * self.dweights_input_to_hidden
            self.weights_hidden_to_output -= learning_rate * self.dweights_hidden_to_output

            # Вывод прогресса
            if epoch % 100 == 0:
                print(f"Эпоха: {epoch}, Ошибка: {error:.4f}")
